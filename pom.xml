<?xml version="1.0" encoding="UTF-8"?>
<!--

    PROJECT
        Name
            Seagull
        
        Description
            Seagull - Intended to be a very simplistic service platform.
            
            The idea here is to define a service platform that says
            nothing about how services communicate with each other.
            This defines APIs and not to many of those, that can be
            implemented with whatever protocol. What protocol is used
            depends on what implementation you make available on
            the classpath. Implementations are fetched using
            SGProviderLookup (currently ServiceLoader is used).
        
    COPYRIGHTS
        Copyright (C) 2023 by Tommy Bengt Svensson All rights reserved.
        
    LICENSE
        Apache 2.0 (Open Source)
        
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        
          http://www.apache.org/licenses/LICENSE-2.0
        
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        
    AUTHORS
        Tommy Svensson (tommy@natusoft.se)

-->

<!--
    ===============================================================
    |                                                              |
    /    This code is currently a playground and should not be     \
    \    used by anyone for anything else than playing around!     /
    |                                                              |
    ===============================================================
-->

<!--suppress CheckValidXmlInScriptTagBody -->
<project
        xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"
>

    <modelVersion>4.0.0</modelVersion>

    <groupId>se.natusoft.seagull</groupId>
    <artifactId>Seagull</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <name>Seagull</name>

    <url>https://github.com/tombensve/Seagull</url>

    <organization>
        <name>Tommy Bengt Svensson</name>
        <url>https://github.com/tombensve/</url>
    </organization>

    <modules>
        <module>Seagull-Service-APIs</module>
        <module>Seagull-Platform-APIs</module>
    </modules>

    <!--
        Common properties
    -->
    <properties>
        <!--
            This info is not picked up from the standard pom tags for this by CLM.
            I don't remember why, it was 10 years aga I did CLM!
        -->
        <!--developer1Name>Tommy Bengt Svensson</developer1Name-->
        <!-- <developer1Email>tommy@natusoft.se</developer1Email>-->

        <!--
            This sets up the version of Groovy and what byte code to produce.
            This is used by the mixin-maven-plugin below.
        -->
        <groovy-version>4.0.16</groovy-version>
        <byte-code>11</byte-code>

        <!--
            These are used in sub poms.
        -->
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!--
            The version of this project. Run the set-version profile to update all poms with this version.
        -->
        <projectVersion>1.0.0</projectVersion>

    </properties>

    <!--
        Project Information
    -->
    <description>
        Seagull - Intended to be a very simplistic service platform.

        The idea here is to define a service platform that says
        nothing about how services communicate with each other.
        This defines APIs and not to many of those, that can be
        implemented with whatever protocol. What protocol is used
        depends on what implementation you make available on
        the classpath. Implementations are fetched using
        SGProviderLookup (currently ServiceLoader is used).
    </description>

    <!--
        This is a playground that started out with Tomcat/JEE and Vaadin, and changed over time.
    -->
    <inceptionYear>2023</inceptionYear>

    <licenses>
        <license>
            <name>Apache 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <name>Tommy Bengt Svensson</name>
            <email>tommy@natusoft.se</email>
        </developer>
    </developers>

    <scm>
        <connection>scm:https://github.com/tombensve/Seagull.git</connection>
        <url>scm:https://github.com/tombensve/Seagull.git</url>
    </scm>

    <issueManagement>
        <system>github</system>
        <url>https://github.com/tombensve/Seagull/issues</url>
    </issueManagement>

    <!--
        Make sure we have access to ns repo.
    -->
    <repositories>
        <repository>
            <id>ns-repo</id>
            <name>ns-artifact-repository</name>
            <url>https://download.natusoft.se/maven</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>ns-plugin-repo</id>
            <name>na-plugin-repository</name>
            <url>https://download.natusoft.se/maven</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <!--
                <dependency>
                    <groupId>org.apache.groovy</groupId>
                    <artifactId>groovy</artifactId>
                    <version>${groovy-version}</version>
                </dependency>
        -->

        <dependency>
            <groupId>se.natusoft.annotation</groupId>
            <artifactId>docutations</artifactId>
            <version>3.0.1</version>
            <scope>compile</scope>
        </dependency>


        <!-- For testing -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <!--
        The variables used here are in my personal setting.xml! I make binaries
        available from my web server after bintray shut down.

        See: https://github.com/tombensve/About
    -->
    <distributionManagement>
        <repository>
            <id>download.natusoft.se</id>
            <name>DownloadNatusoftSe-Seagull</name>
            <url>ftp://${maven.repo.upload}/${maven.base.path}</url>
        </repository>
    </distributionManagement>

    <build>
        <!--
            This makes it possible for me to push to download.natusoft.se/maven.
        -->
        <extensions>
            <!-- Enabling the use of FTP -->
            <extension>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-ftp</artifactId>
                <version>3.5.3</version>
            </extension>
        </extensions>

        <pluginManagement>

            <plugins>
                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                </plugin>

                <plugin>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>

                <plugin>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>

                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <version>3.6.0</version>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>


                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.2.3</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.3.2</version>
                </plugin>

                <plugin>
                    <groupId>se.natusoft.tools.codelicmgr</groupId>
                    <artifactId>CodeLicenseManager-maven-plugin</artifactId>
                    <version>2.2.6</version>
                </plugin>

                <plugin>
                    <groupId>se.natusoft.tools.doc.markdowndoc</groupId>
                    <artifactId>markdowndoc-maven-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

            </plugins>

        </pluginManagement>

        <plugins>

            <!--
                Setup Groovy - To make things simpler I decided to use this plugin
                from Ohad David:

                    https://github.com/odavid/maven-plugins/tree/master/mixin-maven-plugin

                Thanks Ohad for this magnificent plugin!

                ______________________________________________________________________________

                There are currently only 8 and 11 available for bytecode version in NS-Toolbox.
                Groovy 4 however supports much higher versions. It is easy to add version in NS-Toolbox,
                but currently I see no reason. Professionally I have so far not seen anyone go higher
                than 11 (as a consultant in Sweden), and I completely understand why!
            -->
            <plugin>
                <groupId>com.github.odavid.maven.plugins</groupId>
                <artifactId>mixin-maven-plugin</artifactId>
                <version>0.1-alpha-40</version>
                <extensions>true</extensions>
                <configuration>
                    <mixins>
                        <mixin>
                            <groupId>se.natusoft.tools.toolbox</groupId>
                            <artifactId>groovy-build-mixin</artifactId>
                            <version>1.0.0_G${groovy-version}-BC${byte-code}</version>
                        </mixin>
                    </mixins>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.3</version>
            </plugin>

            <!--
                Force checksums when installing to repository.

                I suspect that this might be unnecessary since I think
                deploy creates checksums anyhow when deploying to external
                repository.
            -->
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.1.1</version>
                <configuration>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.6.0</version>
            </plugin>

            <!--
                Package sources.
            -->
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Copy relevant license files to target on install.
            -->
            <plugin>
                <groupId>se.natusoft.tools.codelicmgr</groupId>
                <artifactId>CodeLicenseManager-maven-plugin</artifactId>
                <version>2.2.6</version>

                <inherited>true</inherited> <!-- Has no effect! -->

                <executions>
                    <execution>
                        <id>install-licence-info</id>
                        <goals>
                            <goal>install</goal>
                        </goals>
                        <phase>install</phase>
                        <configuration>

                            <installOptions>
                                <verbose>true</verbose>
                                <licenseDir>target/license</licenseDir>
                                <thirdpartyLicenseDir>target/license/thirdparty</thirdpartyLicenseDir>
                            </installOptions>

                            <!--
                                Here we add those that are not auto resolved.
                            -->
                            <createLicensesMarkdown>true</createLicensesMarkdown>
                            <markdownTargetSubdir>lics</markdownTargetSubdir>
                            <markdownLinkPrefix>https://github.com/tombensve/Seagull/blob/master/lics/
                            </markdownLinkPrefix>

                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--
                This plugin was one of the answers for the problem of referring to paths relative to the top pom
                no mather at what pom you start the build.

                See: https://stackoverflow.com/questions/3084629/finding-the-root-directory-of-a-multi-module-maven-reactor-project

                If I hadn't found this I would have made such a plugin myself! This is a constant problem with maven.
                Without a feature like this it is very difficult to have common resources used in multiple modules.
                In this specific case the markdown-doc plugin is run by the top pom, and is inherited by all other
                modules. It needs an mss file with a full path passed to the plugin. This will differ depending if
                you build from top or a specific submodule. So either I have to make every single submodule have its
                own copy of the mss file or a solution like this to find the one and same mss file no matter if you
                build from top or only builds a submodule.

                Another option also in the page above suggested defining a property in every pom, like "projectTopDir" or
                something and then set it to the top path relative to itself. That would probably work. But you have to
                modify all poms. And if you restructure it can break. This plugin solution seems much easier.
            -->
            <plugin>
                <groupId>org.commonjava.maven.plugins</groupId>
                <artifactId>directory-maven-plugin</artifactId>
                <version>1.0</version>
                <executions>
                    <execution>
                        <id>directories</id>
                        <goals>
                            <goal>highest-basedir</goal>
                        </goals>
                        <phase>initialize</phase>
                        <configuration>
                            <property>main.basedir</property>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--plugin>
                <groupId>com.bluetrainsoftware.maven</groupId>
                <artifactId>groovydoc-maven-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <id>attach-docs</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-docs</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin-->
        </plugins>



    </build>

    <!--
        Profiles
    -->
    <profiles>

        <!--
            This generates documentation.
        -->
        <profile>
            <id>generate-docs</id>
            <activation>
                <file>
                    <exists>docs/filesets</exists>
                </file>
            </activation>

            <build>
                <plugins>
                    <plugin>
                        <groupId>se.natusoft.tools.doc.markdowndoc</groupId>
                        <artifactId>markdowndoc-maven-plugin</artifactId>

                        <executions>
                            <execution>
                                <id>generate-pdf-doc</id>
                                <goals>
                                    <goal>doc</goal>
                                </goals>
                                <phase>install</phase>
                                <configuration>

                                    <generatorOptions>
                                        <generator>pdf</generator>
                                        <inputPaths>${project.basedir}/docs/**/.*.fs</inputPaths>
                                        <parserOptions>markdownJavadoc=true</parserOptions>
                                    </generatorOptions>

                                    <pdfGeneratorOptions>
                                        <resultFile>${project.basedir}/docs/${project.artifactId}.pdf
                                        </resultFile>
                                        <title>${project.name}</title>
                                        <subject>User Guide</subject>
                                        <version>${project.version}</version>
                                        <author>Tommy Bengt Svensson</author>
                                        <copyright>Copyright © ${project.inceptionYear}
                                            ${project.organization.name}
                                        </copyright>
                                        <generateTitlePage>true</generateTitlePage>
                                        <generateTOC>true</generateTOC>
                                        <!-- The main.basedir is set above in directory-maven-plugin -->
                                        <!--suppress MavenModelInspection -->
                                        <mss>${main.basedir}/APS-UserGuide/docs/docs-A4.mss</mss>
                                    </pdfGeneratorOptions>

                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-html-doc</id>
                                <goals>
                                    <goal>doc</goal>
                                </goals>
                                <phase>install</phase>
                                <configuration>

                                    <generatorOptions>
                                        <generator>html</generator>
                                        <inputPaths>${project.basedir}/docs/**/.*.fs</inputPaths>
                                        <parserOptions>markdownJavadoc=true</parserOptions>
                                    </generatorOptions>

                                    <htmlGeneratorOptions>
                                        <resultFile>${project.basedir}/docs/${project.artifactId}.html
                                        </resultFile>
                                        <makeFileLinksRelativeTo>${project.basedir}/docs/src+images/
                                        </makeFileLinksRelativeTo>
                                        <css>docs.css</css>
                                    </htmlGeneratorOptions>

                                </configuration>
                            </execution>
                            <execution>
                                <id>generate-markdown-doc</id>
                                <goals>
                                    <goal>doc</goal>
                                </goals>
                                <phase>install</phase>
                                <configuration>

                                    <generatorOptions>
                                        <generator>md</generator>
                                        <inputPaths>${project.basedir}/docs/**/.*.fs</inputPaths>
                                        <parserOptions>markdownJavadoc=true</parserOptions>
                                    </generatorOptions>

                                    <mdGeneratorOptions>
                                        <resultFile>${project.basedir}/docs/${project.artifactId}.md
                                        </resultFile>
                                        <makeFileLinksRelativeTo>${project.basedir}/docs/src+images/
                                        </makeFileLinksRelativeTo>
                                    </mdGeneratorOptions>

                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                </plugins>
            </build>

        </profile>

        <profile>
            <id>apply-license-info</id>
            <build>
                <plugins>
                    <plugin>

                        <groupId>se.natusoft.tools.codelicmgr</groupId>
                        <artifactId>CodeLicenseManager-maven-plugin</artifactId>

                        <dependencies>
                            <dependency>
                                <groupId>se.natusoft.tools.codelicmgr</groupId>
                                <artifactId>CodeLicenseManager-licenses-common-opensource</artifactId>
                                <version>2.2.4</version>
                            </dependency>
                            <dependency>
                                <groupId>se.natusoft.tools.codelicmgr</groupId>
                                <artifactId>CodeLicenseManager-source-updater-slashstar-comment
                                </artifactId>
                                <version>2.2.4</version>
                            </dependency>
                            <dependency>
                                <groupId>se.natusoft.tools.codelicmgr</groupId>
                                <artifactId>CodeLicenseManager-source-updater-html-xml</artifactId>
                                <version>2.2.4</version>
                            </dependency>
                        </dependencies>

                        <configuration>
                            <project>
                                <codeVersion>${project.version}</codeVersion>
                                <name>${project.name}</name>
                                <description>${project.description}</description>
                            </project>
                            <!-- All options are optional. -->
                            <codeOptions>
                                <verbose>true</verbose>
                                <!-- If not set uses extension on source file to resolve. -->
                                <codeLanguage><!-- by source extension. -->
                                </codeLanguage>
                                <!-- If true updates the license information in source code. -->
                                <updateLicenseInfo>true</updateLicenseInfo>
                                <!-- If true updates the copyright information in source code. -->
                                <updateCopyright>true</updateCopyright>
                                <!-- If true updates the project information in source code. -->
                                <updateProject>true</updateProject>
                                <!-- If true will add authors information to source files that does not have it. This is not always implemented! -->
                                <addAuthorsBlock>true</addAuthorsBlock>
                                <!-- The directories to scan for source code to update with project & license information. -->
                                <sourceCodeDirs>
                                    src/main/java/**/.*.java,
                                    src/test/java/**/.*.java,
                                    src/main/groovy/**/.*.groovy,
                                    src/test/groovy/**/.*.groovy
                                    src/main/resources/**/.*.properties,
                                    src/main/resources/**/.*.xml,
                                    src/assembly/**/.*.xml,
                                    src/main/webapp/**/.*.[cx][sm][sl],
                                    pom.xml
                                </sourceCodeDirs>

                            </codeOptions>

                            <userData>
                                <!--name></name>
                                <value></value-->
                            </userData>

                        </configuration>

                        <executions>
                            <execution>
                                <id>apply-licence-info</id>
                                <goals>
                                    <goal>apply</goal>
                                </goals>
                                <phase>generate-sources</phase>
                            </execution>
                        </executions>

                    </plugin>
                </plugins>
            </build>
        </profile>


    </profiles>


</project>
