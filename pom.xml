<?xml version="1.0" encoding="UTF-8"?>
<!--
          >=>>=>                                             >=>  >=>
        >=>    >=>                                           >=>  >=>
         >=>         >==>       >=> >=>     >=>    >=>  >=>  >=>  >=>
           >=>     >>   >=>   >=>   >=>   >=>  >=> >=>  >=>  >=>  >=>
              >=>  >>===>>=> >=>    >=>  >=>   >=> >=>  >=>  >=>  >=>
        >=>    >=> >>         >=>   >=>   >=>  >=> >=>  >=>  >=>  >=>
          >=>>=>    >====>     >==>>>==>      >=>    >==>=> >==> >==>
                               >=>

        Description
            Seagull - Intended to be a very simplistic service platform.

            The idea here is to define a service platform that says
            nothing about how services communicate with each other.
            This defines APIs and not to many of those, that can be
            implemented with whatever protocol. What protocol is used
            depends on what implementation(s) you make available on
            the classpath. Implementations are fetched using
            SGProviderLookup (currently ServiceLoader is used).

    STATUS

            Under development!

     BUILD RECOMMENDATION

         This builds JDK 11 bytecode! I have, however, realized that
         later JDK:s like JDK 17 builds way faster! So I'm using JDK 17
         to build in IDEA, but make it produce JDK 11 bytecode. There
         is a real big build speed diff between 11 and 17!

         When completely done with this project, I will try to bump up
         the byte code version as far as it will still build. Since this
         is Groovy and not Java, it might be able to go quite high.
         I am not using any JDK library features over 11!

    COPYRIGHTS
        Copyright (C) 2023 by Tommy Bengt Svensson All rights reserved.

    LICENSE

        Licensed under the Human Software License 1.0

        You may not use this file except in compliance with the License.
        You may get a copy of the License at

          https://github.com/tombensve/HSL
          https://tombensvebloggish.craft.me/hsl

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.

    =============================================================================

    NOTE TO SELF: DO NOT TRY TO UPGRADE TO MAVEN 4 YET, IT DOES NOT SEEM BACKWARDS
    COMPATIBLE! Or possibly work in progress.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <!--
        This is my common parent for building Groovy!

        DO NOTE THAT THIS PARENT DOES NOT POINT OUT THIS PROJECT AS A CHILD!

        The dependency is one way that I pull in this, to build groovy
        code using a common setup for this, which is intended to be reused
        by all my Groovy projects!

        I have been using the maven-mixin-plugin for this earlier, but that
        plugin has started to cause me problems, so I tried this, and it
        seems to work!

        I believe the Groovy project itself provides something similar, but
        this one I have control over :-).
    -->
    <parent>
        <groupId>se.natusoft</groupId>
        <artifactId>groovy-build</artifactId>
        <version>2.0.2</version><!-- Provides Groovy 4.0.27 -->
    </parent>

    <!--
        Configuration
    -->
    <properties>

        <!--
            Version of byte-code to produce.
        -->


        <!--
            I get complaints that build is not platform independent!
            Is there really such a thing? A character code that will
            work on every single language on the planet?

            As I understand it, UTF-8 covers quite a lot, and the ultimate
            character encoding valid on the whole planet, Mars and Jupiter too,
            does not exist!

            I think this is informative:
            https://www.orca-ls.com/resources/from-ascii-to-unicode-character-encoding-and-the-future-of-global-communication-28
        -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>${bytecode.version}</maven.compiler.source>
        <maven.compiler.target>${bytecode.version}</maven.compiler.target>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    </properties>

    <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

    <!--
        The parent POM referenced above uses my old 'major.minor.bytecode' format,
        but I've realized that there is a point for the third digit, so my new
        version format is now "major.minor.third-BCnn" where BC stands for Byte-Code!

        Maven is flexible enough to allow that.
    -->

    <groupId>se.natusoft.seagull</groupId>
    <artifactId>Seagull</artifactId>

    <version>0.0.0-BC11</version>

    <packaging>pom</packaging>

    <!--
        Structure
    -->
    <modules>
        <!--
            This defines APIs and tools. This one is always needed!
        -->
        <module>Seagull-Platform</module>

        <!--
            This is a root for different provided implementations.
        -->
        <module>Seagull-Providers</module>

        <module>Seagull-test-and-sample-services</module>

    </modules>


    <!--
        General project information.
    -->
    <url>https://github/tombensve/seagull</url>

    <description>
        Seagull - Is intended to be a very simplistic service platform.

        The idea here is to define a service platform that says
        nothing about how services communicate with each other.
        This defines APIs and not to many of those, that can be
        implemented with whatever protocol. What protocol is used
        depends on what implementation you make available on
        the classpath. Implementations are fetched using
        SGProviderLookup (currently ServiceLoader is used).
    </description>

    <inceptionYear>2024</inceptionYear>

    <organization>
        <name>Tommy Svensson</name>
        <!--
            This is where I'm having some fun, playing with ideas.
        -->
        <url>https://github.com/tombensve/</url>
    </organization>

    <developers>
        <developer>
            <name>Tommy Svensson</name>
            <email>tommy@natusoft.se</email>
            <!--
                I'm not using the musky X nor anything similar!
                The only way to reach med is my email!
            -->
        </developer>
    </developers>

    <issueManagement>
        <system>github</system>
        <url>https://github.com/tombensve/Seagull</url>
    </issueManagement>

    <licenses>
        <!--
            These are the licenses I'm aware of using! As far as I know, all third party
            dependencies are under the Apache Software License. If anyone finds this
            to be wrong, then please inform me!
        -->
        <license>
            <name>Human Software License 1.0</name>
            <url>https://github.com/tombensve/HSL</url>
        </license>
        <!--
            extends
        -->
        <license>
            <name>Apache 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0</url>
        </license>

    </licenses>

    <dependencies>

        <!-- Tools -->

        <dependency>
            <groupId>se.natusoft.tools</groupId>
            <artifactId>LicAnnotations</artifactId>
            <version>1.3.0-BC11</version>
        </dependency>

        <dependency>
            <groupId>se.natusoft.tools</groupId>
            <artifactId>Modelish</artifactId>
            <version>4.0.0-BC11</version>
        </dependency>

        <dependency>
            <groupId>se.natusoft.annotation</groupId>
            <artifactId>docutations</artifactId>
            <version>8.2.1-BC11</version>
        </dependency>

        <!--
            Testing
        -->

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <scm>
        <connection>scm:https://github.com/tombensve/.git</connection>
        <url>scm:https://github.com/tombensve/Seagull.git</url>
    </scm>

    <distributionManagement>
        <repository>
            <id>repsy</id>
            <name>repsy</name>
            <url>https://repo.repsy.io/mvn/tombensve/natusoft-os</url>
        </repository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>repsy</id>
            <name>My Private Maven Repository on Repsy</name>
            <url>https://repo.repsy.io/mvn/tombensve/natusoft-os</url>
        </repository>
    </repositories>

    <pluginRepositories>

        <pluginRepository>
            <id>repsy</id>
            <name>repsy</name>
            <url>https://repo.repsy.io/mvn/tombensve/natusoft-os</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </pluginRepository>

    </pluginRepositories>

    <build>
        <sourceDirectory>src/main/groovy</sourceDirectory>
        <testSourceDirectory>src/test/groovy</testSourceDirectory>

        <!--
        <pluginManagement>
            <plugins>

            </plugins>
        </pluginManagement>
        -->

        <plugins>

            <!--
                 Define project assemblies.
            -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.7.0</version>
            </plugin>

            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <version>3.1.2</version>
                <!--configuration></configuration-->
            </plugin>

            <!--
                Package sources.
            -->
            <plugin>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Testing
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.3.1</version>
            </plugin>

        </plugins>

    </build>

</project>
